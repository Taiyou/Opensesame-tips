---
API: 2.1
OpenSesame: 3.3.5
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title 新規実験
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend psycho
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family "chinese-japanese-korean"
set font_bold no
set experiment_path "C:\\Users\\nirs\\Desktop"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set background black

define sequence experiment
	set flush_keyboard yes
	set description アイテムをシーケンスで実行
	run new_sequence always

define notepad getting_started
	__note__
	Welcome to OpenSesame 3.3 "Lentiform Loewenfeld"!
	If you are new to OpenSesame, it is a good idea to follow one of the tutorials,
	which can be found on the documentation site:
	- <http://osdoc.cogsci.nl/>
	You can also check out the examples. These can be opened via:
	- Menu -> Tools -> Example experiments.
	And feel free to ask for help on the forum:
	- <http://forum.cogsci.nl/>
	Have fun with OpenSesame!
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_script new_inline_script
	set description "Executes Python code"
	___run__
	from __future__ import absolute_import, division
	
	# Import the widgets library
	from libopensesame import widgets
	import psychopy
	from psychopy import locale_setup
	from psychopy import prefs
	from psychopy import gui, visual, core, data, event, clock
	from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED, STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)
	import numpy as np  # whole numpy lib is available, prepend 'np.'
	from numpy import (sin, cos, tan, pi, average,
	                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
	from numpy.random import random, randint, normal, shuffle
	import os  # handy system and path functions
	import sys  # to get file system encoding
	from psychopy.hardware import keyboard
	
	# Store info about the experiment session
	endExpNow = False  # flag for 'escape' or other condition => quit the exp
	frameTolerance = 0.001  # how close to onset before 'same' frame
	
	# Start Code - component code to be run before the window creation
	# Setup the Window
	# store frame rate of monitor if we can measure it
	frameDur = 1.0 /60;# round(win.getActualFrameRate())
	
	# create a default keyboard (e.g. to check for escape)
	defaultKeyboard = keyboard.Keyboard()
	
	# Initialize components for Routine "textBox"
	textBoxClock = core.Clock()
	text = visual.TextStim(win=win, name='text',
	    text="絵とペアーとなる項目を入力してください (スペースで次に進みます)",
	    font='MS Gothic',
	    pos=(-100, 300), height=50, 
	    wrapWidth=None, ori=0, 
	    color=[1.000, 1.000, 1.000],
	    colorSpace='rgb',
	    opacity=1, 
	    languageStyle='LTR',
	    depth=0.0);
	
	TextBox = visual.TextBox2(
	     win, text='', font='MS Gothic',
	     pos=(-300, 200),     letterHeight=32,
	     size=(700, 300), borderWidth=2.0,
	     color=[-1.000, -1.000, -1.000],
	     colorSpace='rgb',
	     opacity=1,
	     bold=False, italic=False,
	     lineSpacing=1.0,
	     padding=0.015,
	     anchor='top-left',
	     fillColor=[1.000, 1.000, 1.000], 
	     borderColor=[-1.000,-1.000,-1.000],
	     flipHoriz=False, flipVert=False,
	     editable=True,
	     name='TextBox',
	     autoLog=True,
	)
	key_resp = keyboard.Keyboard()
	
	# Create some handy timers
	globalClock = core.Clock()  # to track the time since experiment started
	routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 
	
	# ------Prepare to start Routine "textBox"-------
	continueRoutine = True
	# update component parameters for each repeat
	key_resp.keys = []
	key_resp.rt = []
	_key_resp_allKeys = []
	# keep track of which components have finished
	textBoxComponents = [text, TextBox, key_resp]
	for thisComponent in textBoxComponents:
	    thisComponent.tStart = None
	    thisComponent.tStop = None
	    thisComponent.tStartRefresh = None
	    thisComponent.tStopRefresh = None
	    if hasattr(thisComponent, 'status'):
	        thisComponent.status = NOT_STARTED
	# reset timers
	t = 0
	_timeToFirstFrame = win.getFutureFlipTime(clock="now")
	textBoxClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
	frameN = -1
	
	# -------Run Routine "textBox"-------
	while continueRoutine:
	    # get current time
	    t = textBoxClock.getTime()
	    tThisFlip = win.getFutureFlipTime(clock=textBoxClock)
	    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
	    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
	    # update/draw components on each frame
	
	    # *text* updates
	    if text.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        text.frameNStart = frameN  # exact frame index
	        text.tStart = t  # local t and not account for scr refresh
	        text.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(text, 'tStartRefresh')  # time at next scr refresh
	        text.setAutoDraw(True)
	
	    # *TextBox* updates
	    if TextBox.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        TextBox.frameNStart = frameN  # exact frame index
	        TextBox.tStart = t  # local t and not account for scr refresh
	        TextBox.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(TextBox, 'tStartRefresh')  # time at next scr refresh
	        TextBox.setAutoDraw(True)
	
	    # *key_resp* updates
	    waitOnFlip = False
	    if key_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        key_resp.frameNStart = frameN  # exact frame index
	        key_resp.tStart = t  # local t and not account for scr refresh
	        key_resp.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
	        key_resp.status = STARTED
	        # keyboard checking is just starting
	        waitOnFlip = True
	        win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
	        win.callOnFlip(key_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
	    if key_resp.status == STARTED and not waitOnFlip:
	        theseKeys = key_resp.getKeys(keyList=['right'], waitRelease=False)
	        _key_resp_allKeys.extend(theseKeys)
	        if len(_key_resp_allKeys):
	            key_resp.keys = _key_resp_allKeys[-1].name  # just the last key pressed
	            key_resp.rt = _key_resp_allKeys[-1].rt
	            # a response ends the routine
	            continueRoutine = False
	
	    # check for quit (typically the Esc key)
	    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
	        core.quit()
	
	    # check if all components have finished
	    if not continueRoutine:  # a component has requested a forced-end of Routine
	        break
	    continueRoutine = False  # will revert to True if at least one component still running
	    for thisComponent in textBoxComponents:
	        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
	            continueRoutine = True
	            break  # at least one component has not yet finished
	
	    # refresh the screen
	    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
	        win.flip()
	
	# -------Ending Routine "textBox"-------
	TextBox.setAutoDraw(False)
	text.setAutoDraw(False)
	
	for c in win._editableChildren:
	    if c() == TextBox:
	        win._editableChildren.remove(c)
	
	# Encoding textoutput as variable!
	text_output = TextBox.getText();
	exp.set('text_output', text_output)
	
	# the Routine "textBox" was not non-slip safe, so reset the non-slip timer
	routineTimer.reset()
	
	# Flip one final time so any remaining win.callOnFlip() 
	# and win.timeOnFlip() tasks get executed before quitting
	win.flip()
	__end__
	set _prepare ""

define inline_script new_inline_script_1
	set description "Executes Python code"
	___run__
	from __future__ import absolute_import, division
	
	# Import the widgets library
	from libopensesame import widgets
	import psychopy
	from psychopy import locale_setup
	from psychopy import prefs
	from psychopy import gui, visual, core, data, event, clock
	from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED, STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)
	import numpy as np  # whole numpy lib is available, prepend 'np.'
	from numpy import (sin, cos, tan, pi, average,
	                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
	from numpy.random import random, randint, normal, shuffle
	import os  # handy system and path functions
	import sys  # to get file system encoding
	from psychopy.hardware import keyboard
	
	# Store info about the experiment session
	endExpNow = False  # flag for 'escape' or other condition => quit the exp
	frameTolerance = 0.001  # how close to onset before 'same' frame
	
	# Start Code - component code to be run before the window creation
	# Setup the Window
	# store frame rate of monitor if we can measure it
	frameDur = 1.0 / 60;# round(win.getActualFrameRate())
	
	# create a default keyboard (e.g. to check for escape)
	defaultKeyboard = keyboard.Keyboard()
	
	# Initialize components for Routine "textBox"
	textBoxClock = core.Clock()
	text = visual.TextStim(win=win, name='text',
	    text=" (スペースで次に進みます)",
	    font='MS Gothic',
	    pos=(-100, 300), height=50, 
	    wrapWidth=None, ori=0, 
	    color=[1.000, 1.000, 1.000],
	    colorSpace='rgb',
	    opacity=1, 
	    languageStyle='LTR',
	    depth=0.0);
	
	TextBox = visual.TextBox2(
	     win, text='', font='MS Gothic',
	     pos=(-300, 200),     letterHeight=32,
	     size=(700, 300), borderWidth=2.0,
	     color=[-1.000, -1.000, -1.000],
	     colorSpace='rgb',
	     opacity=1,
	     bold=False, italic=False,
	     lineSpacing=1.0,
	     padding=0.015,
	     anchor='top-left',
	     fillColor=[1.000, 1.000, 1.000], 
	     borderColor=[-1.000,-1.000,-1.000],
	     flipHoriz=False, flipVert=False,
	     editable=True,
	     name='TextBox',
	     autoLog=True,
	)
	key_resp = keyboard.Keyboard()
	
	# Create some handy timers
	globalClock = core.Clock()  # to track the time since experiment started
	routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 
	
	# ------Prepare to start Routine "textBox"-------
	continueRoutine = True
	# update component parameters for each repeat
	key_resp.keys = []
	key_resp.rt = []
	_key_resp_allKeys = []
	# keep track of which components have finished
	textBoxComponents = [text, TextBox, key_resp]
	for thisComponent in textBoxComponents:
	    thisComponent.tStart = None
	    thisComponent.tStop = None
	    thisComponent.tStartRefresh = None
	    thisComponent.tStopRefresh = None
	    if hasattr(thisComponent, 'status'):
	        thisComponent.status = NOT_STARTED
	# reset timers
	t = 0
	_timeToFirstFrame = win.getFutureFlipTime(clock="now")
	textBoxClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
	frameN = -1
	
	# -------Run Routine "textBox"-------
	while continueRoutine:
	    # get current time
	    t = textBoxClock.getTime()
	    tThisFlip = win.getFutureFlipTime(clock=textBoxClock)
	    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
	    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
	    # update/draw components on each frame
	
	    # *text* updates
	    if text.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        text.frameNStart = frameN  # exact frame index
	        text.tStart = t  # local t and not account for scr refresh
	        text.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(text, 'tStartRefresh')  # time at next scr refresh
	        text.setAutoDraw(True)
	
	    # *TextBox* updates
	    if TextBox.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        TextBox.frameNStart = frameN  # exact frame index
	        TextBox.tStart = t  # local t and not account for scr refresh
	        TextBox.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(TextBox, 'tStartRefresh')  # time at next scr refresh
	        TextBox.setAutoDraw(True)
	
	    # *key_resp* updates
	    waitOnFlip = False
	    if key_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
	        # keep track of start time/frame for later
	        key_resp.frameNStart = frameN  # exact frame index
	        key_resp.tStart = t  # local t and not account for scr refresh
	        key_resp.tStartRefresh = tThisFlipGlobal  # on global time
	        win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
	        key_resp.status = STARTED
	        # keyboard checking is just starting
	        waitOnFlip = True
	        win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
	        win.callOnFlip(key_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
	    if key_resp.status == STARTED and not waitOnFlip:
	        theseKeys = key_resp.getKeys(keyList=['right'], waitRelease=False)
	        _key_resp_allKeys.extend(theseKeys)
	        if len(_key_resp_allKeys):
	            key_resp.keys = _key_resp_allKeys[-1].name  # just the last key pressed
	            key_resp.rt = _key_resp_allKeys[-1].rt
	            # a response ends the routine
	            continueRoutine = False
	
	    # check for quit (typically the Esc key)
	    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
	        core.quit()
	
	    # check if all components have finished
	    if not continueRoutine:  # a component has requested a forced-end of Routine
	        break
	    continueRoutine = False  # will revert to True if at least one component still running
	    for thisComponent in textBoxComponents:
	        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
	            continueRoutine = True
	            break  # at least one component has not yet finished
	
	    # refresh the screen
	    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
	        win.flip()
	
	# -------Ending Routine "textBox"-------
	TextBox.setAutoDraw(False)
	for c in win._editableChildren:
	    if c() == TextBox:
	        win._editableChildren.remove(c)
	
	# Encoding textoutput as variable!
	text_output = TextBox.getText();
	exp.set('text_output', text_output)
	
	# the Routine "textBox" was not non-slip safe, so reset the non-slip timer
	routineTimer.reset()
	
	# Flip one final time so any remaining win.callOnFlip() 
	# and win.timeOnFlip() tasks get executed before quitting
	#win.flip()
	win.close()
	__end__
	set _prepare ""

define logger new_logger
	set description 実験データをログファイルに書き出します
	set auto_log yes
	log text_output

define sequence new_sequence
	set flush_keyboard yes
	set description アイテムをシーケンスで実行
	run getting_started always
	run welcome always
	run new_inline_script always
	run new_sketchpad always
	run new_logger always

define sketchpad new_sketchpad
	set duration keypress
	set description 視覚刺激の呈示

define sketchpad welcome
	set start_response_interval no
	set reset_variables no
	set duration keypress
	set description 視覚刺激の呈示
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="OpenSesame 3.3 <i>Lentiform Loewenfeld</i>" x=0 y=0 z_index=0

